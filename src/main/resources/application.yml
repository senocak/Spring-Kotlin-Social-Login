server:
  port: ${SERVER_PORT:8083}
  servlet:
    context-path: /
  forward-headers-strategy: framework # CORS network error (URL scheme must be "http" or "https" for CORS request) solution. Ref: https://stackoverflow.com/a/73376127
  compression:
    enabled: true
    min-response-size: 2KB
    mime-types: video/mpeg4-generic, video/mpeg, video/mp4, video/ogg, video/3gpp, video/x-matroska
  error:
    whitelabel:
      enabled: false
spring:
  application:
    name: ${APP_NAME:social}-${random.uuid}
  profiles:
    active: ${PROFILE:local}
  datasource:
    url: jdbc:postgresql://${SERVER_IP:localhost}:${POSTGRESQL_PORT:5432}/${POSTGRESQL_DB:social}?currentSchema=${POSTGRESQL_SCHEMA:public}
    username: ${POSTGRESQL_USER:postgres}
    password: ${POSTGRESQL_PASSWORD:senocak}
    hikari:
      minimum-idle: 0 # The minimum connection pool size is 0
      maximum-pool-size: 40 # it can grow to at most 40 connections
      max-lifetime: 900000 # to retire pooled connections after 10 minutes
      transaction-isolation: TRANSACTION_READ_COMMITTED # to optimize the number of gap locks held by db when traversing the clustered index for bulk updates or deletes.
      # auto-commit: false
      pool-name: SocialHikariCP
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        show_sql: true
        globally_quoted_identifiers: true
        format_sql: true
        use_sql_comments: true
        highlight_sql: true
        session:
          events:
            log:
              LOG_QUERIES_SLOWER_THAN_MS: ${LOG_QUERIES_SLOWER_THAN_MS:10}
    hibernate:
      ddl-auto: update
  messages:
    basename: locales.messages
    encoding: UTF-8
    cache-duration: ${MESSAGES_CACHE_DURATION:-1}
  servlet:
    multipart:
      max-file-size: ${MAX_FILE_SIZE:50MB}
      max-request-size: ${MAX_REQUEST_SIZE:50MB}
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: ${GOOGLE_CLIENT_ID}
            clientSecret: ${GOOGLE_CLIENT_SECRET}
            redirectUri: ${SERVER_FQDN:http://localhost:${server.port}/oauth2/google/redirect}
            scope: email,profile
          github:
            clientId: ${GITHUB_CLIENT_ID}
            clientSecret: ${GITHUB_CLIENT_SECRET}
            redirectUri: ${SERVER_FQDN:http://localhost:${server.port}/oauth2/github/redirect}
            scope: read:user,user:email
          linkedin:
            clientId: ${LINKEDIN_CLIENT_ID}
            clientSecret: ${LINKEDIN_CLIENT_SECRET}
            redirectUri: ${SERVER_FQDN:http://localhost:${server.port}/oauth2/linkedin/redirect}
            client-authentication-method: post
            authorization-grant-type: authorization_code
            scope: openid, profile, email
            client-name: Linkedin
          facebook:
            clientId: ${FACEBOOK_CLIENT_ID}
            clientSecret: ${FACEBOOK_CLIENT_SECRET}
            redirectUri: ${SERVER_FQDN:http://localhost:${server.port}/oauth2/facebook/redirect}
            scope: email, public_profile
          twitter:
            client-id: ${TWITTER_OAUTH_CLIENT_ID}
            client-secret: ${TWITTER_OAUTH_CLIENT_SECRET}
            authorization-grant-type: authorization_code
            redirect-uri: ${SERVER_FQDN:http://localhost:${server.port}/oauth2/twitter/redirect}
            scope: users.read, tweet.read
          spotify:
            client-id: ${SPOTIFY_OAUTH_CLIENT_ID}
            client-secret: ${SPOTIFY_OAUTH_CLIENT_SECRET}
            redirect-uri: ${SERVER_FQDN:http://localhost:${server.port}/oauth2/spotify/redirect}
            authorization-grant-type: client_credentials
            scope: user-read-private, user-read-email, playlist-read-private, playlist-modify-private
          twitch:
            client-id: ${TWITCH_OAUTH_CLIENT_ID}
            client-secret: ${TWITCH_OAUTH_CLIENT_SECRET}
            redirect-uri: ${SERVER_FQDN:http://localhost:${server.port}/oauth2/twitch/redirect}
            authorization-grant-type: client_credentials
            scope: channel:manage:polls, channel:read:polls, user:read:email, openid
          slack:
            client-id: ${SLACK_OAUTH_CLIENT_ID}
            client-secret: ${SLACK_OAUTH_CLIENT_SECRET}
            redirect-uri: ${SERVER_FQDN:https://localhost:${server.port}/oauth2/slack/redirect}
            authorization-grant-type: client_credentials
            scope: openid, email, profile, identity.basic
          dropbox:
            client-id: ${DROPBOX_OAUTH_CLIENT_ID}
            client-secret: ${DROPBOX_OAUTH_CLIENT_SECRET}
            redirect-uri: ${SERVER_FQDN:http://localhost:${server.port}/oauth2/dropbox/redirect}
            authorization-grant-type: client_credentials
          instagram:
            clientId: ${INSTAGRAM_CLIENT_ID}
            clientSecret: ${INSTAGRAM_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            redirectUri: ${SERVER_FQDN:https://localhost:${server.port}/oauth2/instagram/redirect}
            scope: instagram_business_basic
          paypal:
            clientId: ${PAYPAL_CLIENT_ID}
            clientSecret: ${PAYPAL_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            redirectUri: ${SERVER_FQDN:https://localhost:${server.port}/oauth2/instagram/redirect}
            scope: openid, profile, email, address
          discord:
            clientId: ${DISCORD_CLIENT_ID}
            clientSecret: ${DISCORD_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            redirectUri: ${SERVER_FQDN:http://localhost:${server.port}/oauth2/discord/redirect}
            scope: identify, email, openid
          okta:
            clientId: ${OKTA_CLIENT_ID}
            clientSecret: ${OKTA_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            redirectUri: ${SERVER_FQDN:http://localhost:${server.port}/oauth2/okta/redirect}
            scope: okta.users.read.self
          reddit:
            clientId: ${REDDIT_CLIENT_ID}
            clientSecret: ${REDDIT_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            redirectUri: ${SERVER_FQDN:http://localhost:${server.port}/oauth2/reddit/redirect}
            scope: identity, account
          tiktok:
            clientId: ${TIKTOK_CLIENT_ID}
            clientSecret: ${TIKTOK_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            redirectUri: ${SERVER_FQDN:http://localhost:${server.port}/oauth2/tiktok/redirect}
            scope: user.info.basic, user.info.profile, user.info.stats
          box:
            clientId: ${BOX_CLIENT_ID}
            clientSecret: ${BOX_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            redirectUri: ${SERVER_FQDN:http://localhost:${server.port}/oauth2/box/redirect}
            scope: user.info.basic, user.info.profile, user.info.stats
          vimeo:
            clientId: ${VIMEO_CLIENT_ID}
            clientSecret: ${VIMEO_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            redirectUri: ${SERVER_FQDN:http://localhost:${server.port}/oauth2/vimeo/redirect}
            scope: public, private
        provider:
          google:
            tokenUri: ${GOOGLE_TOKEN_URI:https://oauth2.googleapis.com/token}
            userInfoUri: ${GOOGLE_USER_INFO_URI:https://www.googleapis.com/oauth2/v1/userinfo}
          github:
            tokenUri: ${GITHUB_TOKEN_URI:https://github.com/login/oauth/access_token}
            userInfoUri: ${GITHUB_USER_INFO_URI:https://api.github.com/user}
            userEmailUri: ${GITHUB_USER_EMAIL_URI:https://api.github.com/user/emails}
          linkedin:
            authorization-uri: ${LINKEDIN_AUTH_URI:https://www.linkedin.com/oauth/v2/authorization}
            tokenUri: ${LINKEDIN_TOKEN_URI:https://www.linkedin.com/oauth/v2/accessToken}
            userInfoUri: ${LINKEDIN_USER_INFO_URI:https://api.linkedin.com/v2/userinfo?projection=(sub,email_verified,name,locale,given_name,family_name,email,picture)}
          facebook:
            tokenUri: ${FACEBOOK_TOKEN_URI:https://graph.facebook.com/oauth/access_token}
            userInfoUri: ${FACEBOOK_USER_INFO_URI:https://graph.facebook.com/me?fields=id,name,email,picture}
          twitter:
            authorization-uri: ${TWITTER_AUTH_URI:https://x.com/i/oauth2/authorize?code_challenge=challenge&code_challenge_method=plain}
            token-uri: ${TWITTER_TOKEN_URI:https://api.x.com/2/oauth2/token}
            userInfoUri: ${TWITTER_USER_INFO_URI:https://api.x.com/2/users/me?user.fields=created_at,description,entities,id,location,most_recent_tweet_id,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,verified_type,withheld,receives_your_dm}
          spotify:
            token-uri: ${SPOTIFY_TOKEN_URI:https://accounts.spotify.com/api/token}
            userInfoUri: ${SPOTIFY_USER_INFO_URI:https://api.spotify.com/v1/me}
          twitch:
            token-uri: ${TWITCH_TOKEN_URI:https://id.twitch.tv/oauth2/token}
            userInfoUri: ${TWITCH_USER_INFO_URI:https://api.twitch.tv/helix/users}
          slack:
            token-uri: ${SLACK_TOKEN_URI:https://slack.com/api/oauth.v2.access}
            userInfoUri: ${SLACK_USER_INFO_URI:https://slack.com/api/openid.connect.userInfo}
          dropbox:
            token-uri: ${DROPBOX_TOKEN_URI:https://api.dropbox.com/oauth2/token}
            userInfoUri: ${DROPBOX_USER_INFO_URI:https://api.dropboxapi.com/2/users/get_current_account}
          instagram:
            tokenUri: ${INSTAGRAM_TOKEN_URI:https://api.instagram.com/oauth/access_token}
            userInfoUri: ${INSTAGRAM_USER_INFO_URI:https://graph.instagram.com/v21.0/me?fields=user_id,username,name,account_type,profile_picture_url,followers_count,follows_count,media_count}
          paypal:
            tokenUri: ${PAYPAL_TOKEN_URI:https://api-m.sandbox.paypal.com/v1/oauth2/token}
            userInfoUri: ${PAYPAL_USER_INFO_URI:https://api-m.sandbox.paypal.com/v1/oauth2/token/userinfo?schema=openid}
          discord:
            tokenUri: ${DISCORD_TOKEN_URI:https://discord.com/api/oauth2/token}
            userInfoUri: ${DISCORD_USER_INFO_URI:https://discord.com/api/users/@me}
          okta:
            domain: ${OKTA_DOMAIN:https://trial-7049139.okta.com/}
            tokenUri: ${OKTA_TOKEN_URI:${spring.security.oauth2.client.provider.okta.domain}/oauth2/v1/token}
            userInfoUri: ${OKTA_USER_INFO_URI:${spring.security.oauth2.client.provider.okta.domain}/api/v1/users/me}
          reddit:
            tokenUri: ${REDDIT_TOKEN_URI:https://www.reddit.com/api/v1/access_token}
            userInfoUri: ${REDDIT_USER_INFO_URI:https://oauth.reddit.com/api/v1/me}
          tiktok:
            tokenUri: ${TIKTOK_TOKEN_URI:https://open.tiktokapis.com/v2/oauth/token/}
            userInfoUri: ${TIKTOK_USER_INFO_URI:https://open.tiktokapis.com/v2/user/info/?fields=open_id,union_id,avatar_url,avatar_url_100,avatar_large_url,display_name,bio_description,profile_deep_link,is_verified,username,follower_count,following_count,likes_count,video_count}
          box:
            tokenUri: ${BOX_TOKEN_URI:https://api.box.com/oauth2/token}
            userInfoUri: ${BOX_USER_INFO_URI:https://api.box.com/2.0/users/me}
          vimeo:
            tokenUri: ${VIMEO_TOKEN_URI:https://api.vimeo.com/oauth/access_token}
            userInfoUri: ${VIMEO_USER_INFO_URI:https://api.vimeo.com/me}
app:
  jwtSecret: ${JWT_SECRET:sTvHbWsBDSCwW5ZnxpPEx7B5ad2Zx60p}
  jwtExpirationInMs: '#{1 * 60 * 60}' # 1 hour in seconds
  default-locale: ${APP_DEFAULT_LOCALE:en}
logging:
  level:
    org:
      hibernate:
        SQL: ${HIBERNATE_SQL_LEVEL:error}
      springframework: ${SPRING_LEVEL:info}
springdoc:
  api-docs:
    path: /v1/swagger
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      probes:
        enabled: true
      show-details: always